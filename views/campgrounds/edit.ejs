<% layout('/layouts/boilerplate') %>
<div class="row">
    <h1 class="text-center">Edit Campground</h1>
    <div class="col-6 offset-3">
        <form action="/campgrounds/<%= Campground._id %>?_method=PUT" method="POST" novalidate class="validated-form" enctype="multipart/form-data">
            <div class="mb-3">
                <label class="form-label" for="title">Title</label>
                <input class="form-control" type="text" name="Campground[title]" id="title" value="<%= Campground.title %>" required>
                <div class="valid-feedback">Looks good</div>
            </div>

            <div class="mb-3">
                <label class="form-label" for="image">Add Images</label>
                <input class="form-control" type="file" id="image" name="image" multiple>
                <small id="file-label" class="form-text text-muted">No files chosen</small>
            </div>

            <script>
                const input = document.getElementById('image');
                const fileLabel = document.getElementById('file-label');
                input.addEventListener('change', () => {
                    const files = [...input.files].map(f => f.name).join(', ');
                    fileLabel.textContent = files || 'No files chosen';
                });
            </script>

            <div class="mb-3">
                <label class="form-label" for="location">Location</label>
                <input class="form-control" type="text" name="Campground[location]" id="location" value="<%= Campground.location %>" required>
                <div class="valid-feedback">Looks good</div>
            </div>

            <!-- Interactive Map -->
            <div class="mb-3">
                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">Current Location</label>
                        <div id="currentLocationMap" style="height: 400px; width: 100%; border: 2px solid #ccc; border-radius: 5px;"></div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Set New Location on Map</label>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <small class="form-text text-muted">Click on the map to place a new marker for your campground location</small>
                            <button type="button" id="getLocationBtn" class="btn btn-sm btn-outline-primary">
                                <i class="bi bi-geo-alt"></i> Use My Location
                            </button>
                        </div>
                        <div id="locationMap" style="height: 400px; width: 100%; border: 2px solid #ccc; border-radius: 5px;"></div>
                        <input type="hidden" name="Campground[geometry][coordinates][0]" id="longitude" value="<%= Campground.geometry ? Campground.geometry.coordinates[0] : '' %>" required>
                        <input type="hidden" name="Campground[geometry][coordinates][1]" id="latitude" value="<%= Campground.geometry ? Campground.geometry.coordinates[1] : '' %>" required>
                        <input type="hidden" name="Campground[geometry][type]" value="Point">
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label" for="price">Price</label>
                <div class="input-group">
                    <span class="input-group-text">$</span>
                    <input class="form-control" type="text" id="price" name="Campground[price]" value="<%= Campground.price %>" required>
                    <div class="valid-feedback">Looks good</div>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label" for="description">Description</label>
                <textarea class="form-control" name="Campground[description]" id="description" required><%= Campground.description %></textarea>
                <div class="valid-feedback">Looks good</div>
            </div>

            <!-- Existing Images with Delete Option -->
            <div class="mb-3">
                <% Campground.images.forEach(function(img, i) { %>
                    <div class="form-check d-inline-block me-3 mb-2 text-center">
                        <input class="form-check-input" type="checkbox" name="deleteImages[]" value="<%= img.filename %>" id="delete-<%= i %>">
                        <label class="form-check-label d-block" for="delete-<%= i %>">
                            <img src="<%= img.thumbnail %>" class="img-thumbnail" style="max-width: 150px;" alt="Image <%= i + 1 %>"><br>
                            Delete
                        </label>
                    </div>
                <% }); %>
            </div>

            <button class="btn btn-success mb-3">Save Changes</button>
        </form>
        <a href="/campgrounds">Back to all Campgrounds</a>
    </div>
</div>

<% const currentLng = Campground.geometry ? Campground.geometry.coordinates[0] : -74.006; %>
<% const currentLat = Campground.geometry ? Campground.geometry.coordinates[1] : 40.7128; %>
<script>
    const maptiler = window.maptilersdk;
    maptiler.config.apiKey = "<%= mapTilerApiKey %>";
    // Current location map (readonly)
    const currentMap = new maptiler.Map({
        container: 'currentLocationMap',
        style: maptiler.MapStyle.STREETS,
        center: [<%= currentLng %>, <%= currentLat %>],
        zoom: 10,
        interactive: false
    });
    new maptiler.Marker({ color: '#FF0000' })
        .setLngLat([<%= currentLng %>, <%= currentLat %>])
        .addTo(currentMap);
    // Interactive map for new location (EXACTLY like new.ejs)
    const map = new maptiler.Map({
        container: 'locationMap',
        style: maptiler.MapStyle.STREETS,
        center: [-74.006, 40.7128], // Default to NYC, just like new.ejs
        zoom: 10
    });
    let marker = null;
    document.getElementById('getLocationBtn').addEventListener('click', () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const { longitude, latitude } = position.coords;
                    map.flyTo({ center: [longitude, latitude], zoom: 12 });
                    if (marker) marker.remove();
                    marker = new maptiler.Marker({ color: '#FF0000' })
                        .setLngLat([longitude, latitude])
                        .addTo(map);
                    document.getElementById('longitude').value = longitude;
                    document.getElementById('latitude').value = latitude;
                    fetch(`https://api.maptiler.com/geocoding/${longitude},${latitude}.json?key=${maptiler.config.apiKey}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.features && data.features.length > 0) {
                                const locationName = data.features[0].place_name;
                                document.getElementById('location').value = locationName;
                            }
                        })
                        .catch(error => {
                            console.error('Error reverse geocoding:', error);
                        });
                },
                (error) => {
                    console.error('Error getting location:', error);
                    alert('Unable to get your location. Please select manually on the map.');
                }
            );
        } else {
            alert('Geolocation is not supported by this browser.');
        }
    });
    map.on('click', (e) => {
        const { lng, lat } = e.lngLat;
        if (marker) marker.remove();
        marker = new maptiler.Marker({ color: '#FF0000' })
            .setLngLat([lng, lat])
            .addTo(map);
        document.getElementById('longitude').value = lng;
        document.getElementById('latitude').value = lat;
        fetch(`https://api.maptiler.com/geocoding/${lng},${lat}.json?key=${maptiler.config.apiKey}`)
            .then(response => response.json())
            .then(data => {
                if (data.features && data.features.length > 0) {
                    const locationName = data.features[0].place_name;
                    document.getElementById('location').value = locationName;
                }
            })
            .catch(error => {
                console.error('Error reverse geocoding:', error);
            });
    });
    map.addControl(new maptiler.NavigationControl(), 'top-right');
    map.addControl(new maptiler.FullscreenControl(), 'top-right');

    document.querySelector('form').addEventListener('submit', function(e) {
        if (!document.getElementById('longitude').value || !document.getElementById('latitude').value) {
            e.preventDefault();
            alert('Please select a location on the map!');
        }
    });

    // --- Live geocoding on location input ---
    const locationInput = document.getElementById('location');
    let debounceTimeout = null;
    locationInput.addEventListener('input', function() {
        clearTimeout(debounceTimeout);
        debounceTimeout = setTimeout(() => {
            const query = locationInput.value.trim();
            if (!query) return;
            fetch(`https://api.maptiler.com/geocoding/${encodeURIComponent(query)}.json?key=${maptiler.config.apiKey}`)
                .then(res => res.json())
                .then(data => {
                    if (data.features && data.features.length > 0) {
                        const [lng, lat] = data.features[0].center;
                        // Update marker and map
                        if (marker) marker.remove();
                        marker = new maptiler.Marker({ color: '#FF0000' })
                            .setLngLat([lng, lat])
                            .addTo(map);
                        map.setCenter([lng, lat]);
                        map.setZoom(12);
                        // Update hidden coordinate fields
                        document.getElementById('longitude').value = lng;
                        document.getElementById('latitude').value = lat;
                    }
                });
        }, 200); // Debounce: 500ms after user stops typing
    });
</script>